# template.yaml - Main Backstage Template Definition
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: azure-vm-terraform-template
  title: Azure Virtual Machine (Terraform)
  description: Deploy a simple virtual machine on Azure using Terraform with networking and security configurations
  tags:
    - azure
    - vm
    - infrastructure
    - terraform
spec:
  owner: platform-team
  type: infrastructure
  
  parameters:
    - title: Basic Information
      required:
        - name
        - description
        - owner
      properties:
        name:
          title: Service Name
          type: string
          pattern: '^([a-z0-9]+-)*[a-z0-9]+$'
          description: Unique name for your VM service (lowercase, hyphens allowed)
        description:
          title: Description
          type: string
          description: What does this VM do?
        owner:
          title: Owner
          type: string
          description: Team or individual owning this resource
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
              - User

    - title: Azure Configuration
      required:
        - location
        - vmSize
        - osType
      properties:
        location:
          title: Azure Region
          type: string
          description: Azure region for deployment
          default: East US
          enum:
            - East US
            - West US 2
            - Central US
            - North Europe
            - West Europe
            - Southeast Asia
          enumNames:
            - East US
            - West US 2
            - Central US
            - North Europe
            - West Europe
            - Southeast Asia
        vmSize:
          title: VM Size
          type: string
          description: Azure VM size
          default: Standard_B2s
          enum:
            - Standard_B1s
            - Standard_B2s
            - Standard_B4ms
            - Standard_D2s_v3
            - Standard_D4s_v3
        osType:
          title: Operating System
          type: string
          description: Choose the operating system
          default: ubuntu
          enum:
            - ubuntu
            - windows
          enumNames:
            - Ubuntu 20.04 LTS
            - Windows Server 2022

    - title: Network Configuration
      required:
        - allowSshRdp
      properties:
        allowSshRdp:
          title: Allow SSH/RDP Access
          type: boolean
          description: Allow inbound SSH (Linux) or RDP (Windows) access
          default: false
        allowedIpRanges:
          title: Allowed IP Ranges
          type: array
          description: IP ranges allowed for SSH/RDP (leave empty for any IP if access enabled)
          items:
            type: string
          default: []

    - title: Repository Information
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./skeleton
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          location: ${{ parameters.location }}
          vmSize: ${{ parameters.vmSize }}
          osType: ${{ parameters.osType }}
          allowSshRdp: ${{ parameters.allowSshRdp }}
          allowedIpRanges: ${{ parameters.allowedIpRanges }}
          repoUrl: ${{ parameters.repoUrl }}

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: Azure VM deployment for ${{ parameters.name }} using Terraform
        repoUrl: ${{ parameters.repoUrl }}
        defaultBranch: main
        gitCommitMessage: 'Initial commit for ${{ parameters.name }} VM with Terraform'
        gitAuthorName: Backstage
        gitAuthorEmail: noreply@backstage.io

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}

---
# skeleton/catalog-info.yaml
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: ${{ values.name }}
  description: ${{ values.description }}
  annotations:
    github.com/project-slug: ${{ values.repoUrl | parseRepoUrl | pick('owner') }}/${{ values.repoUrl | parseRepoUrl | pick('repo') }}
    azure.com/resource-group: rg-${{ values.name }}
spec:
  type: infrastructure
  lifecycle: production
  owner: ${{ values.owner }}
  system: azure-infrastructure

---
# skeleton/.github/workflows/terraform-deploy.yml
name: Deploy Azure VM with Terraform

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  TF_VERSION: '1.7.0'
  ARM_CLIENT_ID: {% raw %}${{ secrets.ARM_CLIENT_ID }}{% endraw %}
  ARM_CLIENT_SECRET: {% raw %}${{ secrets.ARM_CLIENT_SECRET }}{% endraw %}
  ARM_SUBSCRIPTION_ID: {% raw %}${{ secrets.ARM_SUBSCRIPTION_ID }}{% endraw %}
  ARM_TENANT_ID: {% raw %}${{ secrets.ARM_TENANT_ID }}{% endraw %}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: {% raw %}${{ env.TF_VERSION }}{% endraw %}

    - name: Terraform Format Check
      run: terraform fmt -check

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan -var-file="terraform.tfvars" -out=tfplan
      if: github.event_name == 'pull_request'

    - name: Terraform Apply
      run: terraform apply -var-file="terraform.tfvars" -auto-approve
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    - name: Terraform Output
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **VM Name**: $(terraform output -raw vm_name)" >> $GITHUB_STEP_SUMMARY
        echo "- **Resource Group**: $(terraform output -raw resource_group_name)" >> $GITHUB_STEP_SUMMARY
        echo "- **Location**: $(terraform output -raw location)" >> $GITHUB_STEP_SUMMARY
        
        PUBLIC_IP=$(terraform output -raw public_ip_address 2>/dev/null || echo "None")
        if [ "$PUBLIC_IP" != "None" ] && [ "$PUBLIC_IP" != "" ]; then
          echo "- **Public IP**: $PUBLIC_IP" >> $GITHUB_STEP_SUMMARY
        fi
        
        PRIVATE_IP=$(terraform output -raw private_ip_address 2>/dev/null || echo "Unknown")
        echo "- **Private IP**: $PRIVATE_IP" >> $GITHUB_STEP_SUMMARY

---
# skeleton/terraform/main.tf
terraform {
  required_version = ">= 1.0"
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 3.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.0"
    }
  }
  
  # Uncomment and configure for remote state storage
  # backend "azurerm" {
  #   resource_group_name  = "tfstate-rg"
  #   storage_account_name = "tfstate<random>"
  #   container_name       = "tfstate"
  #   key                  = "${{ values.name }}.terraform.tfstate"
  # }
}

provider "azurerm" {
  features {
    resource_group {
      prevent_deletion_if_contains_resources = false
    }
  }
}

# Data sources
data "azurerm_client_config" "current" {}

# Local values
locals {
  vm_name = "${var.vm_name}-vm"
  
  # OS configuration mapping
  os_config = var.os_type == "ubuntu" ? {
    publisher = "Canonical"
    offer     = "0001-com-ubuntu-server-focal"
    sku       = "20_04-lts-gen2"
    version   = "latest"
  } : {
    publisher = "MicrosoftWindowsServer"
    offer     = "WindowsServer"
    sku       = "2022-datacenter-g2"
    version   = "latest"
  }
  
  # Network security rules
  security_rules = var.allow_ssh_rdp ? [
    {
      name                       = var.os_type == "ubuntu" ? "SSH" : "RDP"
      priority                   = 1001
      direction                  = "Inbound"
      access                     = "Allow"
      protocol                   = "Tcp"
      source_port_range          = "*"
      destination_port_range     = var.os_type == "ubuntu" ? "22" : "3389"
      source_address_prefix      = length(var.allowed_ip_ranges) > 0 ? var.allowed_ip_ranges[0] : "*"
      destination_address_prefix = "*"
    }
  ] : []
  
  common_tags = {
    Environment   = "production"
    Project       = var.vm_name
    ManagedBy     = "Terraform"
    CreatedBy     = "Backstage"
  }
}

# Resource Group
resource "azurerm_resource_group" "main" {
  name     = "rg-${var.vm_name}"
  location = var.location
  tags     = local.common_tags
}

# Virtual Network
resource "azurerm_virtual_network" "main" {
  name                = "${local.vm_name}-vnet"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name
  tags                = local.common_tags
}

# Subnet
resource "azurerm_subnet" "internal" {
  name                 = "internal"
  resource_group_name  = azurerm_resource_group.main.name
  virtual_network_name = azurerm_virtual_network.main.name
  address_prefixes     = ["10.0.2.0/24"]
}

# Network Security Group
resource "azurerm_network_security_group" "main" {
  name                = "${local.vm_name}-nsg"
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name
  tags                = local.common_tags

  dynamic "security_rule" {
    for_each = local.security_rules
    content {
      name                       = security_rule.value.name
      priority                   = security_rule.value.priority
      direction                  = security_rule.value.direction
      access                     = security_rule.value.access
      protocol                   = security_rule.value.protocol
      source_port_range          = security_rule.value.source_port_range
      destination_port_range     = security_rule.value.destination_port_range
      source_address_prefix      = security_rule.value.source_address_prefix
      destination_address_prefix = security_rule.value.destination_address_prefix
    }
  }
}

# Public IP (conditional)
resource "azurerm_public_ip" "main" {
  count               = var.allow_ssh_rdp ? 1 : 0
  name                = "${local.vm_name}-pip"
  resource_group_name = azurerm_resource_group.main.name
  location            = azurerm_resource_group.main.location
  allocation_method   = "Dynamic"
  domain_name_label   = local.vm_name
  tags                = local.common_tags
}

# Network Interface
resource "azurerm_network_interface" "main" {
  name                = "${local.vm_name}-nic"
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name
  tags                = local.common_tags

  ip_configuration {
    name                          = "testconfiguration1"
    subnet_id                     = azurerm_subnet.internal.id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id          = var.allow_ssh_rdp ? azurerm_public_ip.main[0].id : null
  }
}

# Associate Network Security Group to Network Interface
resource "azurerm_network_interface_security_group_association" "main" {
  network_interface_id      = azurerm_network_interface.main.id
  network_security_group_id = azurerm_network_security_group.main.id
}

# Generate random password for Windows or SSH key for Linux
resource "random_password" "vm_password" {
  count   = var.os_type == "windows" ? 1 : 0
  length  = 16
  special = true
}

# SSH Key for Linux (if not provided)
resource "azurerm_ssh_public_key" "main" {
  count               = var.os_type == "ubuntu" && var.ssh_public_key == "" ? 1 : 0
  name                = "${local.vm_name}-ssh-key"
  resource_group_name = azurerm_resource_group.main.name
  location            = azurerm_resource_group.main.location
  public_key          = file("~/.ssh/id_rsa.pub") # Default SSH key path
}

# Virtual Machine
resource "azurerm_linux_virtual_machine" "main" {
  count                           = var.os_type == "ubuntu" ? 1 : 0
  name                            = local.vm_name
  resource_group_name             = azurerm_resource_group.main.name
  location                        = azurerm_resource_group.main.location
  size                            = var.vm_size
  admin_username                  = var.admin_username
  disable_password_authentication = true
  tags                            = local.common_tags

  network_interface_ids = [
    azurerm_network_interface.main.id,
  ]

  admin_ssh_key {
    username   = var.admin_username
    public_key = var.ssh_public_key != "" ? var.ssh_public_key : azurerm_ssh_public_key.main[0].public_key
  }

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Premium_LRS"
  }

  source_image_reference {
    publisher = local.os_config.publisher
    offer     = local.os_config.offer
    sku       = local.os_config.sku
    version   = local.os_config.version
  }
}

resource "azurerm_windows_virtual_machine" "main" {
  count               = var.os_type == "windows" ? 1 : 0
  name                = local.vm_name
  resource_group_name = azurerm_resource_group.main.name
  location            = azurerm_resource_group.main.location
  size                = var.vm_size
  admin_username      = var.admin_username
  admin_password      = random_password.vm_password[0].result
  tags                = local.common_tags

  network_interface_ids = [
    azurerm_network_interface.main.id,
  ]

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Premium_LRS"
  }

  source_image_reference {
    publisher = local.os_config.publisher
    offer     = local.os_config.offer
    sku       = local.os_config.sku
    version   = local.os_config.version
  }
}

---
# skeleton/terraform/variables.tf
variable "vm_name" {
  description = "Name of the virtual machine"
  type        = string
  default     = "${{ values.name }}"
}

variable "location" {
  description = "Azure region for deployment"
  type        = string
  default     = "${{ values.location }}"
}

variable "vm_size" {
  description = "Size of the virtual machine"
  type        = string
  default     = "${{ values.vmSize }}"
  
  validation {
    condition = contains([
      "Standard_B1s", "Standard_B2s", "Standard_B4ms",
      "Standard_D2s_v3", "Standard_D4s_v3"
    ], var.vm_size)
    error_message = "VM size must be one of the allowed values."
  }
}

variable "os_type" {
  description = "Operating system type"
  type        = string
  default     = "${{ values.osType }}"
  
  validation {
    condition     = contains(["ubuntu", "windows"], var.os_type)
    error_message = "OS type must be either 'ubuntu' or 'windows'."
  }
}

variable "admin_username" {
  description = "Admin username for the VM"
  type        = string
  default     = "azureuser"
}

variable "ssh_public_key" {
  description = "SSH public key for Linux VMs"
  type        = string
  default     = ""
  sensitive   = true
}

variable "allow_ssh_rdp" {
  description = "Allow SSH/RDP access from internet"
  type        = bool
  default     = ${{ values.allowSshRdp }}
}

variable "allowed_ip_ranges" {
  description = "List of IP ranges allowed for SSH/RDP access"
  type        = list(string)
  default     = [{% for ip in values.allowedIpRanges %}"{{ ip }}"{% if not loop.last %}, {% endif %}{% endfor %}]
}

variable "environment" {
  description = "Environment name"
  type        = string
  default     = "production"
}

---
# skeleton/terraform/outputs.tf
output "vm_name" {
  description = "The name of the virtual machine"
  value       = var.os_type == "ubuntu" ? azurerm_linux_virtual_machine.main[0].name : azurerm_windows_virtual_machine.main[0].name
}

output "vm_id" {
  description = "The ID of the virtual machine"
  value       = var.os_type == "ubuntu" ? azurerm_linux_virtual_machine.main[0].id : azurerm_windows_virtual_machine.main[0].id
}

output "resource_group_name" {
  description = "The name of the resource group"
  value       = azurerm_resource_group.main.name
}

output "location" {
  description = "The Azure region where resources are deployed"
  value       = azurerm_resource_group.main.location
}

output "public_ip_address" {
  description = "The public IP address of the virtual machine"
  value       = var.allow_ssh_rdp ? azurerm_public_ip.main[0].ip_address : null
}

output "private_ip_address" {
  description = "The private IP address of the virtual machine"
  value       = azurerm_network_interface.main.private_ip_address
}

output "ssh_connection_command" {
  description = "SSH command to connect to the VM (Linux only)"
  value       = var.os_type == "ubuntu" && var.allow_ssh_rdp ? "ssh ${var.admin_username}@${azurerm_public_ip.main[0].ip_address}" : null
}

output "admin_password" {
  description = "Admin password for Windows VM"
  value       = var.os_type == "windows" ? random_password.vm_password[0].result : null
  sensitive   = true
}

---
# skeleton/terraform/terraform.tfvars
# Terraform Variables File
# This file contains the default values for your VM deployment

vm_name      = "${{ values.name }}"
location     = "${{ values.location }}"
vm_size      = "${{ values.vmSize }}"
os_type      = "${{ values.osType }}"
allow_ssh_rdp = ${{ values.allowSshRdp }}
{% if values.allowedIpRanges %}
allowed_ip_ranges = [{% for ip in values.allowedIpRanges %}"{{ ip }}"{% if not loop.last %}, {% endif %}{% endfor %}]
{% else %}
allowed_ip_ranges = []
{% endif %}

# SSH public key for Linux VMs (leave empty to use default ~/.ssh/id_rsa.pub)
ssh_public_key = ""

# Environment
environment = "production"

---
# skeleton/.gitignore
# Terraform
*.tfstate
*.tfstate.*
.terraform/
.terraform.lock.hcl
*.tfvars.backup
*.tfplan
crash.log
crash.*.log

# Sensitive files
*.pem
*.key
!*.key.pub

# OS
.DS_Store
Thumbs.db

# Editor
.vscode/
.idea/
*.swp
*.swo

# Logs
*.log

---
# skeleton/README.md
# ${{ values.name }} - Azure Virtual Machine (Terraform)

${{ values.description }}

## Overview

This repository contains Terraform infrastructure as code for deploying a ${{ values.osType }} virtual machine on Azure.

## Architecture

- **VM Size**: ${{ values.vmSize }}
- **Operating System**: ${{ values.osType }}
- **Location**: ${{ values.location }}
- **SSH/RDP Access**: ${{ values.allowSshRdp }}
- **Infrastructure as Code**: Terraform

## Prerequisites

1. Azure CLI installed and configured
2. Terraform >= 1.0 installed
3. GitHub repository secrets configured:
   - `ARM_CLIENT_ID`: Azure service principal client ID
   - `ARM_CLIENT_SECRET`: Azure service principal client secret
   - `ARM_SUBSCRIPTION_ID`: Your Azure subscription ID
   - `ARM_TENANT_ID`: Your Azure tenant ID

## Quick Start

### 1. Clone and Setup

```bash
git clone <repository-url>
cd ${{ values.name }}
```

### 2. Configure Variables

Edit `terraform/terraform.tfvars` to customize your deployment:

```hcl
vm_name      = "${{ values.name }}"
location     = "${{ values.location }}"
vm_size      = "${{ values.vmSize }}"
os_type      = "${{ values.osType }}"
allow_ssh_rdp = ${{ values.allowSshRdp }}
```

{% if values.osType == 'ubuntu' %}
### 3. SSH Key Setup (Linux)

For Linux VMs, you need to provide an SSH public key:

```bash
# Generate a new SSH key pair (if you don't have one)
ssh-keygen -t rsa -b 4096 -C "your-email@example.com"

# Add your public key to terraform.tfvars
ssh_public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAA... your-email@example.com"
```
{% endif %}

### 4. Deploy with Terraform

```bash
cd terraform

# Initialize Terraform
terraform init

# Plan the deployment
terraform plan -var-file="terraform.tfvars"

# Apply the configuration
terraform apply -var-file="terraform.tfvars"
```

## Automated Deployment

The VM is automatically deployed using GitHub Actions when changes are pushed to the main branch.

### GitHub Actions Workflow

- **Trigger**: Push to main branch or manual dispatch
- **Steps**: Format check, init, validate, plan, apply
- **Outputs**: VM details and connection information

## Access Information

{% if values.allowSshRdp %}
{% if values.osType == 'ubuntu' %}
### SSH Access (Linux)

After deployment, connect using:

```bash
# Get the public IP from Terraform output
terraform output public_ip_address

# Connect via SSH
ssh azureuser@<public-ip-address>
```
{% else %}
### RDP Access (Windows)

After deployment:

1. Get the public IP: `terraform output public_ip_address`
2. Get the admin password: `terraform output -raw admin_password`
3. Use Remote Desktop Connection to connect to the public IP
4. Username: `azureuser`
5. Password: (from step 2)
{% endif %}
{% else %}
### Private Access Only

External access is disabled for security. Access options:
- Azure Bastion
- Site-to-Site VPN
- Point-to-Site VPN
- Azure Virtual Network Gateway
{% endif %}

## Terraform Commands

```bash
# Initialize Terraform (first time)
terraform init

# Format Terraform files
terraform fmt

# Validate configuration
terraform validate

# Plan deployment
terraform plan -var-file="terraform.tfvars"

# Apply changes
terraform apply -var-file="terraform.tfvars"

# Show current state
terraform show

# List resources
terraform state list

# Get outputs
terraform output

# Destroy infrastructure
terraform destroy -var-file="terraform.tfvars"
```

## Remote State (Optional)

For production environments, configure remote state storage:

1. Create an Azure Storage Account for Terraform state
2. Uncomment and configure the backend block in `main.tf`
3. Initialize with the backend configuration

```bash
terraform init -backend-config="storage_account_name=<your-storage-account>"
```

## Security Features

- **Network Security Groups**: Configurable inbound rules
- **Conditional Public IP**: Only created when external access is enabled
- **SSH Key Authentication**: For Linux VMs (no password authentication)
- **Strong Passwords**: Auto-generated for Windows VMs
- **Premium Storage**: SSD storage for better performance
- **Resource Tagging**: Consistent tagging for resource management

## Monitoring and Maintenance

### Enable Azure Monitor

```bash
# Install the Azure Monitor agent (Linux)
az vm extension set \
  --resource-group rg-${{ values.name }} \
  --vm-name ${{ values.name }}-vm \
  --name AzureMonitorLinuxAgent \
  --publisher Microsoft.Azure.Monitor
```

### Update Management

Consider enabling:
- Azure Update Management
- Security Center recommendations
- Log Analytics workspace integration
- Azure Backup for the VM

## Troubleshooting

### Common Issues

1. **Authentication Issues**
   ```bash
   az login
   az account set --subscription <subscription-id>
   ```

2. **SSH Connection Issues**
   - Check Network Security Group rules
   - Verify SSH key is correctly configured
   - Ensure VM is running

3. **Terraform State Issues**
   - Use `terraform refresh` to sync state
   - Check for resource locks in Azure portal

### Logs and Diagnostics

```bash
# View Terraform logs
export TF_LOG=DEBUG
terraform apply

# Check VM boot diagnostics in Azure portal
# Monitor resources with Azure Monitor
```

## Cleanup

To remove all resources:

```bash
terraform destroy -var-file="terraform.tfvars"
```

## Support

- **Platform Team**: Contact for infrastructure questions
- **Azure Documentation**: https://docs.microsoft.com/azure/
- **Terraform Documentation**: https://registry.terraform.io/providers/hashicorp/azurerm/

---
**Created with ❤️ by Backstage**